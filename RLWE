# MASTER-THESIS
LATTICE-BASED POST-QUANTUM CRYPTOGRAPHY
import time
import numpy as np
from numpy.polynomial import polynomial as p

start = time.time()

n = 256
q = 25601
# qval = 10

# q = 2**qval-1

xN_1 = [1] + [0] * (n - 1) + [1]  # (x^n + 1)


def gen_poly(n, q):
    global xN_1
    l = 0  # Gamma Distribution Location (Mean "center" of dist.)
    poly = np.floor(np.random.normal(l, size=n))
    while len(poly) != n:
        poly = np.floor(np.random.normal(l, size=n))
        poly = np.floor(p.polydiv(poly, xN_1)[1] % q)
    return poly


# Generate A
A = np.floor(np.random.random(size=(n)) * q) % q

A = np.floor(p.polydiv(A, xN_1)[1])

# Alice (Secret & Error)
sA = gen_poly(n, q)
eA = gen_poly(n, q)

bA = p.polymul(A, sA) % q
bA = np.floor(p.polydiv(sA, xN_1)[1])
bA = p.polyadd(bA, eA) % q

# Bob
sB = gen_poly(n, q)
eB = gen_poly(n, q)

bB = p.polymul(A, sB) % q
bB = np.floor(p.polydiv(sB, xN_1)[1])
bB = p.polyadd(bB, eB) % q

# Shared Secret
# Alice
sharedAlice = np.floor(p.polymul(sA, bB) % q)
sharedAlice = np.floor(p.polydiv(sharedAlice, xN_1)[1]) % q  # TODO FIX THIS HAS TO BE DIVED BY HELPER
sharedBob = np.floor(p.polymul(sB, bA) % q)
sharedBob = np.floor(p.polydiv(sharedBob, xN_1)[1]) % q

# Extracting noise
# --Bob
u = np.asarray([0] * n)
i = 0

while i < len(u):
    if len(bB) <= i: break;
    if int(bB[i] / (q / 4)) == 0:
        u[i] = 0
    elif int(bB[i] / (q / 2)) == 0:
        u[i] = 1
    elif int(bB[i] / (3 * q / 4)) == 0:
        u[i] = 0
    elif int(bB[i] / (q)) == 0:
        u[i] = 1
    else:
        print("error! (1)")
    i += 1

i = 0
while i < len(u):
    # Region 0 (0 --- q/4 and q/2 --- 3q/4)
    if u[i] == 0:
        if q * 0.125 <= sharedBob[i] < q * 0.625:
            sharedBob[i] = 1
        else:
            sharedBob[i] = 0


    # Region 1 (q/4 --- q/2 and 3q/4 --- q)
    elif u[i] == 1:
        if q * 0.875 <= sharedBob[i] < q * 0.375:
            sharedBob[i] = 0
        else:
            sharedBob[i] = 1

    else:
        print("error! (2)")

    i += 1

# --Alice
i = 0
while i < len(u):
    # Region 0 (0 --- q/4 and q/2 --- 3q/4)
    if u[i] == 0:
        if q * 0.125 <= sharedAlice[i] < q * 0.625:
            sharedAlice[i] = 1
        else:
            sharedAlice[i] = 0


    # Region 1 (q/4 --- q/2 and 3q/4 --- q)
    elif u[i] == 1:
        if q * 0.875 <= sharedAlice[i] < q * 0.375:
            sharedAlice[i] = 0
        else:
            sharedAlice[i] = 1

    else:
        print("error! (3)")
    i += 1

#
print("A:", len(A), "|", A)
print("\n-Alice---")
# print(" s:",len(sA),"|",sA)
# print(" e:",len(eA),"|",eA)
print(" b:", len(bA), "|", bA)
print("\n-Bob---")
# print(" s':",len(sB),"|",sB)
# print(" e':",len(eB),"|",eB)
print(" b':", len(bB), "|", bB)
print(" u :", len(u), "|", u)
print("\n")
print("Shared Secret Alice:", len(sharedAlice), "|", sharedAlice)
print("Shared Secret Bob:", len(sharedBob), "|", sharedBob)

print("\n\n--Verification--")
i = 0
while i < len(sharedBob):
    if sharedAlice[i] != sharedBob[i]:
        print("Error at index", i)
    i += 1
end = time.time()
print("Run time of execution of RLWE program is :", end - start)
